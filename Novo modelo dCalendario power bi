let
    GetDateTable = (
        language as text, 
        optional inputStartDate as date, 
        optional inputEndDate as date, 
        optional columnOfDates as list, 
        optional inputDayStartWeek as text,
        optional monthStartFiscalYear as number, 
        optional holidaysTable as table 
    ) as table =>
let
    currentDate = Date.From ( DateTime.FixedLocalNow() ),    
    startDate =  
        if columnOfDates <> null then Date.StartOfYear ( List.Min ( columnOfDates ) )
        else if inputStartDate <> null then Date.StartOfYear ( inputStartDate )
        else Date.StartOfYear ( currentDate ), 
    endDate = 
        if columnOfDates <> null then Date.EndOfYear ( List.Max ( columnOfDates ) )
        else if inputEndDate <> null then Date.EndOfYear ( inputEndDate )
        else Date.EndOfYear ( currentDate ),
    dayStartWeek = 
        if inputDayStartWeek = "ISO 8601 - Segunda-feira/Monday"    then Day.Monday    else     
        if inputDayStartWeek = "Domingo/Sunday"                     then Day.Sunday    else
        if inputDayStartWeek = "Segunda-Feira/Monday"               then Day.Monday    else
        if inputDayStartWeek = "Terça-Feira/Tuesday"                then Day.Tuesday   else
        if inputDayStartWeek = "Quarta-Feira/Wednesday"             then Day.Wednesday else
        if inputDayStartWeek = "Quinta-Feira/Thursday"              then Day.Thursday  else
        if inputDayStartWeek = "Sexta-Feira/Friday"                 then Day.Friday    else
        if inputDayStartWeek = "Sábado/Saturday"                    then Day.Saturday  else
        Day.Monday,

    zeroWidthSpace = Character.FromNumber ( 8203 ), 
    delimiter = "/",  
    _i = Int64.Type, 
    _t = Text.Type, 
    _d = Date.Type, 
    _tb = Table.Type, 
    
    languagePrefixes = Table.FromRows(
        {
            {"en-US", "W", "Q", "Working Day", "Non-Working Day", "Current Year", "Previous Year", "Current Quarter", "Previous Quarter", "Current Month", "Previous Month", "Current Week", "Previous Week", "Current Day", "Previous Day" },
            {"pt-BR", "S", "T", "Dia Útil", "Dia Não Útil", "Ano Atual", "Ano Anterior", "Trimestre Atual", "Trimestre Anterior", "Mês Atual", "Mês Anterior", "Semana Atual", "Semana Anterior", "Dia Atual", "Dia Anterior"   },
            {"es-ES", "S", "C", "Día Laborable", "Día No Laborable", "Año actual", "Año anterior", "Trimestre actual", "Trimestre anterior", "Mes actual", "Mes anterior", "Semana actual", "Semana anterior", "Día actual", "Día anterior"},
            {"fr-FR", "S", "Q", "Jour Ouvrabvle", "Jour de Repos", "Année en cours", "Année précédente", "Trimestre en cours", "Trimestre précédent", "Mois en cours", "Mois précédent", "Semaine en cours", "Semaine précédente", "Jour en cours", "Jour précédent"}
        },
        {"Language", "Week", "Quarter", "WorkingDay", "NonWorkingDay", "CurrentYear", "PreviousYear", "CurrentQuarter", "PreviousQuarter", "CurrentMonth", "PreviousMonth", "CurrentWeek", "PreviousWeek", "CurrentDay", "PreviousDay" }
    ),
    weekPrefix = Table.SelectRows ( languagePrefixes, each [Language]=language )[Week]{0}, 
    quarterPrefix = Table.SelectRows ( languagePrefixes, each [Language]=language )[Quarter]{0}, 
    workingDay = Table.SelectRows ( languagePrefixes, each [Language]=language )[WorkingDay]{0}, 
    nonWorkingDay = Table.SelectRows ( languagePrefixes, each [Language]=language )[NonWorkingDay]{0},
    currentYear = Table.SelectRows ( languagePrefixes, each [Language]=language )[CurrentYear]{0},
    previousYear = Table.SelectRows ( languagePrefixes, each [Language]=language )[PreviousYear]{0},
    currentQuarter = Table.SelectRows ( languagePrefixes, each [Language]=language )[CurrentQuarter]{0},
    previousQuarter = Table.SelectRows ( languagePrefixes, each [Language]=language )[PreviousQuarter]{0},
    currentMonth = Table.SelectRows ( languagePrefixes, each [Language]=language )[CurrentMonth]{0},
    previousMonth = Table.SelectRows ( languagePrefixes, each [Language]=language )[PreviousMonth]{0},
    currentWeek = Table.SelectRows ( languagePrefixes, each [Language]=language )[CurrentWeek]{0},
    previousWeek = Table.SelectRows ( languagePrefixes, each [Language]=language )[PreviousWeek]{0},
    currentDay = Table.SelectRows ( languagePrefixes, each [Language]=language )[CurrentDay]{0},
    previousDay= Table.SelectRows ( languagePrefixes, each [Language]=language )[PreviousDay]{0},
    
    totalRows = Duration.Days ( endDate - startDate ) + 1, 
    DatesList = List.Dates ( startDate, totalRows, #duration ( 1, 0, 0, 0 ) ), 

    InitialTable = Table.FromList (
        DatesList,
        Splitter.SplitByNothing(), 
        type table [ Date = _d ] 
    ),

    AddIndex = Table.AddIndexColumn ( InitialTable, "Index", 1, 1, _i ),

    AddingOnlyStepColumns = Table.AddColumn (
        AddIndex,
        "OnlyOneStepColumns", each [
            Day of Month = Date.Day ( [Date] ),
            Day of Year = Date.DayOfYear ( [Date] ), 
            Day of Week = Date.DayOfWeek ( [Date], dayStartWeek ) + 1,
            Month = Date.Month ( [Date] ),
            Start of Month = Date.StartOfMonth ( [Date] ),
            End of Month = Date.EndOfMonth ( [Date] ),
            Month Index = ( Date.Year ( [Date] ) - Date.Year ( startDate ) ) * 12 + Date.Month ( [Date] ),
            Quarter = Date.QuarterOfYear ( [Date] ),
            Start of Quarter = Date.StartOfQuarter ( [Date] ),
            End of Quarter = Date.EndOfQuarter ( [Date] ),
            Quarter Index = ( Date.Year ( [Date] ) - Date.Year ( startDate ) ) * 4 + Date.QuarterOfYear ( [Date] ),
            Year = Date.Year ( [Date] ), 
            Start of Year = Date.StartOfYear ( [Date] ),
            End of Year = Date.EndOfYear ( [Date] ),
            Year Index = Date.Year ( [Date] ) - Date.Year ( startDate ) + 1,
            Week = 
                if inputDayStartWeek = "ISO 8601 - Segunda-feira/Monday" or inputDayStartWeek = null or inputDayStartWeek = "" then 
                    let 
                        thursdayInWeek = Date.AddDays ( [Date], 3 - Date.DayOfWeek ( [Date], Day.Monday ) ), 
                        yearThursdayInWeek = #date ( Date.Year ( thursdayInWeek ), 1, 1 ), 
                        difDays = Duration.Days ( thursdayInWeek - yearThursdayInWeek )  
                    in 
                        Number.IntegerDivide ( difDays, 7, 0 ) + 1
                else
                    Date.WeekOfYear([Date], dayStartWeek),
            Start of Week = Date.StartOfWeek ( [Date], dayStartWeek ),
            End of Week = Date.EndOfWeek ( [Date], dayStartWeek ),
            Days from Now = Number.From ( [Date] - currentDate ),
            Months from Now =
                let
                    row = Date.Year ( [Date] ) * 12 - 1 + Date.Month ( [Date] ),
                    current = Date.Year ( currentDate ) * 12 - 1 + Date.Month ( currentDate )
                in
                    row - current,
            Quarters from Now = 
                let
                    row = Date.Year ( [Date] ) * 4 - 1 + Date.QuarterOfYear ( [Date] ),
                    current = Date.Year ( currentDate ) * 4 - 1 + Date.QuarterOfYear ( currentDate )
                in
                    row - current,
            Years from Now =  Date.Year ( [Date] ) -  Date.Year ( currentDate ),
            Weeks from Now =  Number.From ( Date.StartOfWeek ( [Date], dayStartWeek ) - Date.StartOfWeek ( currentDate, dayStartWeek ) ) / 7
        ],
        type [ Day of Month = _i, Day of Year = _i, Day of Week = _i, Month = _i, Start of Month = _d, End of Month = _d, Month Index = _i, Quarter = _i, Start of Quarter = _d, End of Quarter = _d, Quarter Index = _i, Year = _i, Start of Year = _d, End of Year = _d, Year Index = _i, Week = _i, Start of Week = _d, End of Week = _d, Days from Now = _i, Months from Now = _i, Quarters from Now = _i, Years from Now = _i, Weeks from Now = _i ] 
    ),

    ExpandedOnlyOneStepColumns = Table.Buffer ( Table.ExpandRecordColumn(AddingOnlyStepColumns, "OnlyOneStepColumns", {"Day of Month", "Day of Year", "Day of Week", "Month", "Start of Month", "End of Month", "Month Index", "Quarter", "Start of Quarter", "End of Quarter", "Quarter Index", "Year", "Start of Year", "End of Year", "Year Index", "Week", "Start of Week", "End of Week", "Days from Now", "Months from Now", "Quarters from Now", "Years from Now", "Weeks from Now"}, {"Day of Month", "Day of Year", "Day of Week", "Month", "Start of Month", "End of Month", "Month Index", "Quarter", "Start of Quarter", "End of Quarter", "Quarter Index", "Year", "Start of Year", "End of Year", "Year Index", "Week", "Start of Week", "End of Week", "Days from Now", "Months from Now", "Quarters from Now", "Years from Now", "Weeks from Now"}) ), 

    ExtractingWeekIndex = 
        let 
            colStartOfWeek = Table.SelectColumns ( ExpandedOnlyOneStepColumns, "Start of Week" ),
            colDistinct = Table.Distinct ( colStartOfWeek ),
            addedIndex = Table.AddIndexColumn ( colDistinct, "Week Index", 1, 1, _i )
        in
            Table.Join ( ExpandedOnlyOneStepColumns, {"Start of Week"}, addedIndex, {"Start of Week"} ),

    AddingYearISO = Table.AddColumn ( ExtractingWeekIndex, "Year ISO", each Date.Year ( Date.AddDays ( [Date], 26 - [Week] ) ), _i ),

    maxMonthIndex = List.Max ( AddingYearISO[Month Index]) + 1,
    maxWeekIndex = List.Max ( AddingYearISO[Week Index] ),
    maxQuarterIndex = ( Date.Year ( endDate ) - Date.Year ( startDate ) ) * 4 + 4,
    yearStartDate = Date.Year ( startDate ),
    yearEndDate = Date.Year ( endDate ),
    maxDayIndex = List.Max ( AddingYearISO[Index] ), 

    AddingComplexColums =  Table.AddColumn (
        AddingYearISO,
        "ComplexColumns",
        each [
            Day Of Week Name = Text.Repeat ( zeroWidthSpace, 7 - [Day of Week] ) & Text.Proper ( Date.DayOfWeekName ( [Date], language ) ),
            Day of Week Name Short =  Text.Repeat ( zeroWidthSpace, 7 - [Day of Week] ) & Text.Start ( Text.Proper ( Date.DayOfWeekName ( [Date], language ) ), 3 ),
            Day of Week Name Initial =  Text.Repeat ( zeroWidthSpace, 7 - [Day of Week] ) & Text.Start ( Text.Proper ( Date.DayOfWeekName ( [Date], language ) ), 1 ), 
            Month Name = Text.Repeat ( zeroWidthSpace, 12 - [Month] ) & Text.Proper ( Date.MonthName ( [Date], language ) ),
            Month Name Short = Text.Repeat ( zeroWidthSpace, 12 - [Month] ) & Text.Start ( Text.Proper ( Date.MonthName ( [Date], language ) ), 3 ),
            Month Name Initial = Text.Repeat ( zeroWidthSpace, 12 - [Month] ) & Text.Start ( Text.Proper ( Date.MonthName ( [Date], language ) ), 1 ),
            Month Year = Text.Repeat ( zeroWidthSpace, maxMonthIndex - [Month Index] ) & Text.Start ( Text.Proper ( Date.MonthName ( [Date], language ) ), 3 ) & delimiter & Text.End ( Text.From ( [Year] ), 2 ),
            Week Year = 
                if inputDayStartWeek = "ISO 8601 - Segunda-feira/Monday"  or inputDayStartWeek = null or inputDayStartWeek = ""
                then Text.Repeat ( zeroWidthSpace, maxWeekIndex - [Week Index] ) & weekPrefix & Text.PadStart ( Text.From ( [Week] ), 2, "0" ) & delimiter & Text.End ( Text.From ( [Year ISO] ), 2 )
                else Text.Repeat ( zeroWidthSpace, maxWeekIndex - [Week Index] ) & weekPrefix & Text.PadStart ( Text.From ( [Week] ), 2, "0" ) & delimiter & Text.End ( Text.From ( [Year] ), 2 ),
            Quarter Name = quarterPrefix & Text.From ( [Quarter] ),
            Quarter Year = Text.Repeat ( zeroWidthSpace, maxQuarterIndex - [Quarter Index] ) & quarterPrefix & Text.From ( [Quarter] ) & delimiter & Text.End ( Text.From ( [Year] ), 2 ),
            Year Descending = Text.Repeat ( zeroWidthSpace, ( [Year] - yearStartDate + 1  ) ) & Text.From ( [Year] ),
            Fiscal Year = try if [Month] >= monthStartFiscalYear then [Year] else [Year] - 1 otherwise null,
            Fortnight of Month = if [Day of Month] <= 15 then 1 else 2,
            Semester of Year = if [Month] <= 6 then 1 else 2
        ],
        type [ Day Of Week Name =_t, Day of Week Name Short = _t, Day of Week Name Initial = _t, Month Name = _t, Month Name Short = _t, Month Name Initial = _t, Month Year = _t, Week Year = _t, Quarter Name = _t, Quarter Year = _t, Year Descending = _t, Fiscal Year = _i, Fortnight of Month = _i, Semester of Year = _i ] 
    ),
    ExpandedComplexColumns = Table.ExpandRecordColumn(AddingComplexColums, "ComplexColumns", {"Day Of Week Name", "Day of Week Name Short", "Day of Week Name Initial", "Month Name", "Month Name Short", "Month Name Initial", "Month Year", "Week Year", "Quarter Name", "Quarter Year", "Year Descending", "Fiscal Year", "Fortnight of Month", "Semester of Year"}, {"Day Of Week Name", "Day of Week Name Short", "Day of Week Name Initial", "Month Name", "Month Name Short", "Month Name Initial", "Month Year", "Week Year", "Quarter Name", "Quarter Year", "Year Descending", "Fiscal Year", "Fortnight of Month", "Semester of Year"}),


    addRelativeColumns = Table.AddColumn (
        ExpandedComplexColumns,
        "RelativeColumns", 
        each [
            Relative Year = 
                let
                    index = Text.Repeat ( zeroWidthSpace, yearEndDate - [Year] ),
                    textOut = 
                        if [Years from Now] = 0 then currentYear else 
                        if [Years from Now] = -1 then previousYear else 
                        Text.From ( [Year] ) 
                in
                    index & textOut,
            Relative Quarter = 
                let
                    index = Text.Repeat ( zeroWidthSpace, maxQuarterIndex - [Quarter Index] ),
                    textOut = 
                        if [Quarters from Now] = 0 then currentQuarter else 
                        if [Quarters from Now] = -1 then previousQuarter else 
                        quarterPrefix & Text.From ( [Quarter] ) & delimiter & Text.End ( Text.From ( [Year] ), 2 )
                in
                    index & textOut, 
            Relative Month =  
                let 
                    index = Text.Repeat ( zeroWidthSpace, maxMonthIndex - [Month Index] ),
                    textOut = 
                        if [Months from Now] = 0 then currentMonth else 
                        if [Months from Now] = -1 then previousMonth else 
                        Text.Start ( Text.Proper ( Date.MonthName ( [Date], language ) ), 3 ) & delimiter & Text.End ( Text.From ( [Year] ), 2 )
                in
                    index & textOut,
            Relative Week = 
                let
                    index = Text.Repeat ( zeroWidthSpace, maxWeekIndex - [Week Index] ),
                    textOut = 
                        if [Weeks from Now] = 0 then currentWeek else 
                        if [Weeks from Now] = -1 then previousWeek else 
                        if inputDayStartWeek = "ISO 8601 - Segunda-feira/Monday"  or inputDayStartWeek = null or inputDayStartWeek = ""
                            then weekPrefix & Text.PadStart ( Text.From ( [Week] ), 2, "0" ) & delimiter & Text.End ( Text.From ( [Year ISO] ), 2 )
                            else weekPrefix & Text.PadStart ( Text.From ( [Week] ), 2, "0" ) & delimiter & Text.End ( Text.From ( [Year] ), 2 )
                in
                    index & textOut,
            Relative Day = 
                let
                    index = Text.Repeat ( zeroWidthSpace, maxDayIndex - [Index] ),
                    textOut = 
                        if [Days from Now] = 0 then currentDay else 
                        if [Days from Now] = -1 then previousDay else 
                        Date.ToText([Date], [Format="dd/MM/yyyy", Culture = language]) 
                in
                    index & textOut
        ],
        type [
            Relative Year = _t, Relative Quarter = _t, Relative Month = _t, Relative Week = _t, Relative Day = _t   
        ]
    ),
                    
    ExpandedRelativeColumns = Table.ExpandRecordColumn(addRelativeColumns, "RelativeColumns", {"Relative Year", "Relative Quarter", "Relative Month", "Relative Week", "Relative Day"}, {"Relative Year", "Relative Quarter", "Relative Month", "Relative Week", "Relative Day"}),  
    
    addHolidaysToTable = Table.AddColumn ( 
        ExpandedRelativeColumns,
        "Holiday",
        each 
            let
                _date = [Date]
            in
                try Table.SelectRows ( holidaysTable, each [Date] = _date )[Holiday]{0}
                otherwise null,
            _t
    ),

    addWorkingDays = Table.AddColumn (
        addHolidaysToTable,
        "WorkingDayColumns",
        each 
            let
                dayOfWeek = Date.DayOfWeek([Date],Day.Monday)
            in
                [
                    Is Working Day = if [Holiday] <> null or List.Contains ( {5..6}, dayOfWeek ) then 0 else 1,
                    Label Working Day = if [Holiday] <> null or List.Contains ( {5..6}, dayOfWeek ) then nonWorkingDay else workingDay
                ],
        type [ Is Working Day = _i, Label Working Day = _t ]
    ),
    ExpandedWorkingDayColumns = Table.ExpandRecordColumn(addWorkingDays, "WorkingDayColumns", {"Is Working Day", "Label Working Day"}, {"Is Working Day", "Label Working Day"}),
    
    ReorderedColumns = Table.ReorderColumns(ExpandedWorkingDayColumns,{"Index", "Date", "Day of Month", "Day of Year", "Days from Now", "Day of Week", "Day Of Week Name", "Day of Week Name Short", "Day of Week Name Initial", "Week", "Start of Week", "End of Week", "Weeks from Now", "Week Index", "Week Year", "Month", "Month Name", "Month Name Short", "Month Name Initial", "Month Year", "Start of Month", "End of Month", "Month Index", "Months from Now", "Quarter", "Quarter Name", "Quarter Year", "Start of Quarter", "End of Quarter", "Quarter Index", "Quarters from Now", "Year", "Year ISO", "Year Descending", "Fiscal Year", "Start of Year", "End of Year", "Year Index", "Years from Now", "Fortnight of Month", "Semester of Year", "Holiday", "Is Working Day", "Label Working Day", "Relative Year", "Relative Quarter", "Relative Month", "Relative Week", "Relative Day"}),

    ColumnNames = Table.ColumnNames ( ReorderedColumns ),
    
    NewColumnNames = 
        let
            listColumnsEN = { "Index", "Date", "Day of Month", "Day of Year", "Days from Now", "Day of Week", "Day Of Week Name", "Day of Week Name Short", "Day of Week Name Initial", "Week", "Start of Week", "End of Week", "Weeks from Now", "Week Index", "Week Year", "Month", "Month Name", "Month Name Short", "Month Name Initial", "Month Year", "Start of Month", "End of Month", "Month Index", "Months from Now", "Quarter", "Quarter Name", "Quarter Year", "Start of Quarter", "End of Quarter", "Quarter Index", "Quarters from Now", "Year", "Year ISO", "Year Descending", "Fiscal Year", "Start of Year", "End of Year", "Year Index", "Years from Now", "Fortnight of Month", "Semester of Year", "Holiday", "Is Working Day", "Label Working Day", "Relative Year", "Relative Quarter", "Relative Month", "Relative Week", "Relative Day" },
            listColumnsPT = { "Índice", "Data", "Dia do Mês", "Dia do Ano", "Dias até Agora", "Dia da Semana", "Nome do Dia da Semana", "Nome Curto do Dia da Semana", "Iniciais do Nome do Dia da Semana", "Semana", "Início da Semana", "Fim da Semana", "Semanas até Agora", "Índice da Semana", "Ano Semana", "Mês", "Nome do Mês", "Nome Curto do Mês", "Iniciais do Nome do Mês", "Mês Ano", "Início do Mês", "Fim do Mês", "Índice do Mês", "Meses até Agora", "Trimestre", "Nome do Trimestre", "Trimestre Ano", "Início do Trimestre", "Final do Trimestre", "Índice do Trimestre", "Trimestres até Agora", "Ano", "Ano ISO", "Ano Decrescente", "Ano Fiscal", "Início do Ano", "Fim do Ano", "Índice do Ano", "Anos até Agora", "Quinzena do Mês", "Semestre do Ano", "Feriado", "É Dia Útil", "Rótulo Dia Útil", "Ano Relativo", "Trimestre Relativo", "Mês Relativo", "Semana Relativa", "Dia Relativo"},
            listColumnsES = { "Índice", "Fecha", "Dia del Mes", "Día del Año", "Días A Partir de Ahora", "Día de La Semana", "Nombre del Día de La Semana", "Día de La Semana Nombre Corto", "Día de La Semana Nombre Inicial", "Semana", "Comienzo de La Semana", "Fin de Semana", "Semanas A Partir de Ahora", "Índice de La Semana", "La Semana del Año", "Mes", "Nombre de Mes", "Nombre de Mes Corto", "Nombre de Mes Inicial", "Mes Año", "Comienzo del Mes", "Fin de Mes", "Índice de Mensajes", "Meses A Partir de Ahora", "Cuarto", "Nombre del Cuarto", "Cuarto de Año", "Inicio del Cuarto", "Fin de Trimestre", "Índice de Cuartos", "Cuartos de Ahora", "Año", "Año ISO", "Año Descendente", "Año Fiscal", "Comienzo del Año", "Fin de Año", "Índice del año", "Años a partir de ahora", "Quincena del mes", "Semestre del año", "Día festivo", "Es día laborable", "Etiqueta del día laborable", "Año relativo", "Trimestre relativo", " Mes relativo", "Semana relativa", "Día relativo" },
            listColumnsFR = { "Indice", "Date", "Jour du Mois", "Jour de L'année", "Dans Les Jours", "Jour de La Semaine", "Nom du Jour de La Semaine", "Jour de La Semaine Nom Court", "Nom du Jour de La Semaine Initial", "Semaine", "Début de La Semaine", "Fin de Semaine", "Dans Des Semaines", "Indice de La Semaine", "Année de Semaine", "Mois", "Nom du Mois", "Nom du Mois Court", "Nom du Mois Initial", "Mois Année", "Début du Mois", "Fin du Mois", "Indice du Mois", "Dans Des Mois", "Quart", "Quart de Nom", "Trimestre", "Début du Quart", "Fin du Quart", "Quart D'indice", "Les Quartiers À Partir de Maintenant", "Année", "Année ISO", "Année Descendant", "Exercice Fiscal", "Début de L'année", "Fin D'année", "Indice de l'année", "Années à partir de maintenant", "Quinzaine du mois", "Semestre de l'année", "Vacances", "C'est un jour ouvrable", "Jour ouvrable", "Année relative", "Trimestre relatif", " Mois relatif", "Semaine relative", "Jour relatif" }
        in
            if language = "en-US" then listColumnsEN
            else if language = "pt-BR" then listColumnsPT
            else if language = "es-ES" then listColumnsES
            else if language = "fr-FR" then listColumnsFR
            else listColumnsEN,
    
    RenamedColumns = Table.RenameColumns ( ReorderedColumns,  List.Zip ( { ColumnNames, NewColumnNames } ) )
in
    RenamedColumns,

    Documentation = type function(
        language as ( type text meta [ 
                Documentation.AllowedValues = {"en-US", "pt-BR", "es-ES", "fr-FR"},
                Documentation.FieldCaption = "Idioma/Language",
                Documentation.FieldDescription = " Selecione o idioma para gerar a tabela calendário com nomes de colunas, nomess dos meses, nomes dos dias das semanas e todos os demais campos texto. EN: Select the language to genereate the data table with column names, month names, names of week day and all the other texts fields. "
            ]),
        optional inputStartDate as ( type date meta [ 
                //Documentation.AllowedValues = "",
                Documentation.FieldCaption = "Data Inicial/Start Date",
                Documentation.FieldDescription = " Defina a data inicial.EN: Define the start date. "
            ]),
        optional inputEndDate as ( type date meta [ 
                //Documentation.AllowedValues = "",
                Documentation.FieldCaption = "Data Final/End Date",
                Documentation.FieldDescription = " Defina a data final.EN: Define the start date. "          
            ]),
        optional columnOfDates as ( type list meta [ 
                //Documentation.AllowedValues = "",
                Documentation.FieldCaption = "Coluna de Datas/Dates Column",
                Documentation.FieldDescription = " Escolha uma coluna de datas. Cuidado! bases grandes podem causar lentidão durante a carga dos dados.EN: Choose a column of dates. Caution! Large FactTables can cause slowness on load of the data. "
            ]),
        optional inputDayStartWeek as ( type text meta [ 
                Documentation.AllowedValues = {"ISO 8601 - Segunda-feira/Monday", "Domingo/Sunday", "Segunda-Feira/Monday", "Terça-Feira/Tuesday", "Quarta-Feira/Wednesday", "Quinta-Feira/Thursday", "Sexta-Feira/Friday", "Sábado/Saturday"},
                Documentation.FieldCaption = "Dia em que se inicia a semana/Day of Start of Week",
                Documentation.FieldDescription = " Selecione o dia em que se inicia cada semana.EN: Define the day of start of week"
            ]),  
        optional monthStartFiscalYear as ( type number meta [ 
                Documentation.AllowedValues = { 1..12 },
                Documentation.FieldCaption = "Mês de Início do Ano Fiscal/Month of Start of Fiscal Year",
                Documentation.FieldDescription = " Escolha o número do mês do início do ano fiscal.EN: Select the number of month of start of fiscal year."
            ]),
        optional holidaysTable as ( type table meta [ 
                //Documentation.AllowedValues = "",
                Documentation.FieldCaption = "Tabela Feriados/Holidays Table",
                Documentation.FieldDescription = " A tabela com apenas duas colunas: ""Date"" and ""Holiday"" que irá gerar a coluna de feriados e dias úteis.EN: A table with just two columns: ""Date"" and ""Holiday"" that it generates the holidays column and impacts the columns of working days. "
            ])         
    ) as table 
    meta [
        Documentation.Name = "Função M para gerar tabela dimensão calendário - Elaborado por Alison Pezzott - version: 3.0.1",
        //Documentation.Description = "", 
        Documentation.LongDescription = "https://github.com/alisonpezzott/powerbi/blob/main/power-query-m/fxGeraCalendarioAlisonV3",
        Documentation.Category = "Função M", 
        Documentation.Version = "3.0.1",
        Documentation.Source = "https://github.com/alisonpezzott/powerbi/blob/main/power-query-m/fxGeraCalendarioAlisonV3", 
        Documentation.Author = "Alison Pezzott", 
        Documentation.Examples = {[
            Description =  "Siga-me no meu canal no YouTube e em minhas redes sociais!EN: Follow me on my Youtube channel and my social networking!", 
            Code = "Cuidado! bases grandes para gerar dadas automaticamente podem causar lentidão durante a carga dos dados.#(lf)A tabela para usar no parâmetro  Tabela Feriados/Holidays Table necessita possuir apenas duas colunas: ""Date"" e ""Holiday"" nomes da colunas em inglês mesmo. Onde a coluna Date é a data do feriado e a coluna Holiday possui a descrição com o nome do feriado.#(lf)EN: Caution: Use large fact tables to obtain the date reference may cause slowness during load.#(lf)The table to use in the parameter Tabela Feriados/Holidays Table needs to have just two columns: ""Date"" and ""Holiday"". Where Date is the date of the holiday and Holiday is a string with the name of the holiday.", 
            Result = "Youtube: https://www.youtube.com/c/alisonpezzott/?sub_confirmation=1#(lf)Instagram: https://www.instagram.com/alisonpezzott#(lf)Github: https://github.com/alisonpezzott#(lf)Linkedin: https://www.linkedin.com/in/alisonpezzott#(lf)Se precisar de suporte, pode me chamar em algum dos canais acima#(lf)EN: If you need support, please contact me through these above channels." 
        ]}
    ]
in 
    Value.ReplaceType ( GetDateTable,  Documentation )
